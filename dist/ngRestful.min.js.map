<<<<<<< HEAD
{"version":3,"sources":["module.js","services/resource.js","services/restful.js"],"names":["ngRestful","angular","module","config","$http","defaults","useXDomain","constant","$domain","setDomain","value","this","factory","$restful","$globals","resource","url","isAbsolute","$url","join","$config","regex","match","setParams","uri","params","p","replace","prototype","fetch","path","Object","toString","call","http","get","save","data","post","update","put","delete","$createRequest","method","$normalizeConfig","request","assign","hasFileObject","form","FormData","prop","append","headers","undefined","identity","ignoreProps","obj","forEach","el","hasOwnProperty"],"mappings":"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","file":"ngRestful.min.js","sourcesContent":["var ngRestful = angular.module(\"ngRestful\", []);\n\nngRestful.config([\"$httpProvider\", function($http){\n\t// Enable CORS response\n\t$http.defaults.useXDomain = true;\n}]);\n\n/*\n * Define constant configuration for the module\n */\nngRestful.constant(\"ngRestful\", {\n\t$domain: \"\",\n\tsetDomain: function(value){\n\t\tthis.$domain = value;\n\t}\n});","ngRestful.factory(\"$resource\", [\"$restful\", \"ngRestful\", function($restful, $globals){\n\t/**\n\t * Construct function of resource object\n\t * Defines the common settings for the resource\n\t * \n\t * @param  {String} url  The URL of the host API\n\t * @param  {Object} opts The options settings to set in the resource\n\t */\n\tfunction resource(url, config){\n\t\tif($globals.$domain && !isAbsolute(url)){\n\t\t\tthis.$url = [$globals.$domain, url].join(\"/\")\n\t\t}\n\n\t\telse{\n\t\t\tthis.$url = url;\n\t\t}\n\n\t\tthis.$config = config || {};\n\t}\n\n\t/**\n\t * Checks if a provided url is absolute\n\t * \n\t * @param  {String}  url The provided url to evaluate\n\t * @return {Boolean}     Whether the url is absolute\n\t */\n\tfunction isAbsolute(url){\n\t\tvar regex = /^(https:\\/\\/|http:\\/\\/|\\/\\/).+/g;\n\n\t\treturn url.match(regex) !== null;\n\t}\n\n\t/**\n\t * Fetches a collection list from the resource\n\t * \n\t * @param  {String|Array}  path The resource path of the host\n\t * @return {Promise}            The response from the host\n\t */\n\tresource.prototype.fetch = function(path){\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\n\t\t\tpath = setParams(path[0], path[1])\n\t\t}\n\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\n\n\t\treturn $restful.get(http, this.$config);\n\t};\n\n\t/**\n\t * Sends data to a resource uri with POST method\n\t * \n\t * @param  {String|Array} path The path of the host\n\t * @param  {Object}       data The data to send to the resource\n\t * @return {Promise}           The response from the host\n\t */\n\tresource.prototype.save = function(path, data){\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\n\t\t\tpath = setParams(path[0], path[1])\n\t\t}\n\t\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\n\t\t\n\t\treturn $restful.post(http, data, this.$config);\n\t};\n\n\t/**\n\t * Sends data to a resource uri with PUT method\n\t * \n\t * @param  {String|Array} path The path of the host\n\t * @param  {Object}       data The data to send to the resource\n\t * @return {Promise}           The response from the host\n\t */\n\tresource.prototype.update = function(path, data) {\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\n\t\t\tpath = setParams(path[0], path[1])\n\t\t}\n\t\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\n\n\t\treturn $restful.put(http, data, this.$config);\n\t};\n\n\t/**\n\t * Sends a request with data to a resource uri with DELETE method\n\t * \n\t * @param  {String|Array} path The path of the host\n\t * @param  {Object}       data The data to send to the resource\n\t * @return {Promise}           The response from the host\n\t */\n\tresource.prototype.delete = function(path, data) {\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\n\t\t\tpath = setParams(path[0], path[1])\n\t\t}\n\t\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\n\n\t\treturn $restful.delete(http, data, this.$config);\n\t};\n\n\t/**\n\t * Sets uri parameters into the uri string\n\t * where key object is the parameter name and\n\t * value is the value to replace\n\t * \n\t * @param {String} uri    The uri with parameters to replace\n\t * @param {Object} params The map of parameters to set into uri\n\t */\n\tfunction setParams(uri, params){\n\t\tfor(p in params){\n\t\t\turi = uri.replace(\":\" + p, params[p]);\n\t\t}\n\n\t\treturn uri;\n\t}\n\n\treturn resource;\n}]);","ngRestful.service(\"$restful\", [\"$http\", function($http){\n\t/**\n\t * Performs a GET request to the host\n\t * \n\t * @param  {String}  url     The url path where to send the request\n\t * @param  {Object}  config  The config options to set in the request\n\t * @return {Promise}         The response from the host\n\t */\n\tthis.get = function(url, config){\n\t\treturn $http(this.$createRequest({}, \"GET\", url, config));\n\t};\n\n\t/**\n\t * Performs a POST request to the host\n\t * \n\t * @param  {String}  url     The url path where to send the request\n\t * @param  {Object}  data    The data to send along the request\n\t * @param  {Object}  config  The config options to set in the request\n\t * @return {Promise}         The response from the host\n\t */\n\tthis.post = function(url, data, config){\n\t\treturn $http(this.$createRequest(data, \"POST\", url, config));\n\t};\n\n\t/**\n\t * Performs a PUT request to the host\n\t * \n\t * @param  {String}  url     The url path where to send the request\n\t * @param  {Object}  data    The data to send along the request\n\t * @param  {Object}  config  The config options to set in the request\n\t * @return {Promise}         The response from the host\n\t */\n\tthis.put = function(url, data, config){\n\t\treturn $http(this.$createRequest(data, \"PUT\", url, config));\n\t};\n\n\t/**\n\t * Performs a DELETE request to the host\n\t * \n\t * @param  {String}  url     The url path where to send the request\n\t * @param  {Object}  data    The data to send along the request\n\t * @param  {Object}  config  The config options to set in the request\n\t * @return {Promise}         The response from the host\n\t */\n\tthis.delete = function(url, data, config){\n\t\treturn $http(this.$createRequest(data, \"DELETE\", url, config));\n\t};\n\n\t/**\n\t * Creates a request object for $http, the returned object can vary if\n\t * the data has a file object, if that's the case then content-type is set\n\t * to undefined in order to let the browser handle it\n\t * \n\t * @param  {Object} data    The data that will be sent to the host\n\t * @param  {String} method  The method on which will be used for the request\n\t * @param  {String} url     The url where to send the request\n\t * @param  {Object} config  The object mapped with request config\n\t * @return {Object}         The object for $http\n\t */\n\tthis.$createRequest = function(data, method, url, config){\n\t\tconfig = this.$normalizeConfig(config);\n\n\t\tvar request = {\n\t\t\turl: url,\n\t\t\tmethod: method,\n\t\t\tdata: data\n\t\t};\n\n\t\t// Merge config data into request object\n\t\tObject.assign(request, config);\n\n\t\t// Create custom object for attached files\n\t\tif(method != \"GET\" && this.hasFileObject(data)){\n\t\t\tvar form = new FormData();\n\n\t\t\tfor(prop in data){\n\t\t\t\tform.append(prop, data[prop]);\n\t\t\t}\n\n\t\t\tif(typeof request.headers == \"undefined\"){\n\t\t\t\trequest.headers = {};\n\t\t\t}\n\n\t\t\t// let the broswer handle the content-type request\n\t\t\trequest.headers[\"Content-Type\"] = undefined;\n\n\t\t\t// Set the data for request with attached files\n\t\t\trequest[\"data\"] = form;\n\t\t\trequest[\"transformRequest\"] = angular.identity;\n\t\t}\n\n\t\treturn request;\n\t}\n\n\t/**\n\t * Checks if the object data has a file object\n\t * \n\t * @param  {Object}  data The data where to find\n\t * @return {Boolean}      Whether the file was found\n\t */\n\tthis.hasFileObject = function(data){\n\t\tfor(prop in data){\n\t\t\tif(Object.prototype.toString.call(data[prop]) == \"[object File]\"){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Normalizes the config structure for $createRequest use\n\t * \n\t * @param  {Object} config The object to check and remove unecessary data\n\t * @return {Object}        The object to be used for request object\n\t */\n\tthis.$normalizeConfig = function(config){\n\t\tvar ignoreProps = [\"url\", \"method\", \"data\"\t];\n\n\t\tvar obj = config;\n\n\t\t// Remove all props with the name listed\n\t\tignoreProps.forEach(function(el){\n\t\t\tif(obj.hasOwnProperty(el)){\n\t\t\t\tdelete obj[el];\n\t\t\t}\n\t\t});\n\n\t\treturn obj;\n\t}\n}]);"]}
=======
{"version":3,"sources":["module.js","services/resource.js","services/restful.js"],"names":["ngRestful","angular","module","config","$http","defaults","useXDomain","constant","$domain","setDomain","value","this","factory","$restful","$globals","resource","url","opts","isString","Error","isAbsolute","$url","join","$headers","headers","regex","match","setParams","uri","params","p","replace","prototype","fetch","path","Object","toString","call","http","get","save","data","post","update","put","delete","service","$createRequest","method","request","hasFileObject","form","FormData","prop","append","undefined","transformRequest","identity"],"mappings":"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","file":"ngRestful.min.js","sourcesContent":["var ngRestful = angular.module(\"ngRestful\", []);\n\nngRestful.config([\"$httpProvider\", function($http){\n\t// Enable CORS response\n\t$http.defaults.useXDomain = true;\n}]);\n\n/*\n * Define constant configuration for the module\n */\nngRestful.constant(\"ngRestful\", {\n\t$domain: \"\",\n\tsetDomain: function(value){\n\t\tthis.$domain = value;\n\t}\n});","ngRestful.factory(\"$resource\", [\"$restful\", \"ngRestful\", function($restful, $globals){\n\t/**\n\t * Construct function of resource object\n\t * Defines the common settings for the resource\n\t * \n\t * @param  {String} url  The URL of the host API\n\t * @param  {Object} opts The options settings to set in the resource\n\t */\n\tfunction resource(url, opts){\n\t\tif(typeof url != \"undefined\" && !angular.isString(url)){\n\t\t\tthrow new Error(\"url in constructor is not a valid value.\");\n\t\t}\n\n\t\telse{\n\t\t\turl = \"\";\n\n\t\t\tif($globals.$domain && !isAbsolute(url)){\n\t\t\t\tthis.$url = [$globals.$domain, url].join(\"/\");\n\t\t\t}\n\n\t\t\telse{\n\t\t\t\tthis.$url = url;\n\t\t\t}\n\t\t}\n\n\t\tthis.$headers = opts ? (opts.headers || {}) : {};\n\t}\n\n\t/**\n\t * Checks if a provided url is absolute\n\t * \n\t * @param  {String}  url The provided url to evaluate\n\t * @return {Boolean}     Whether the url is absolute\n\t */\n\tfunction isAbsolute(url){\n\t\tvar regex = /^(https:\\/\\/|http:\\/\\/|\\/\\/).+/g;\n\n\t\treturn url.match(regex) !== null;\n\t}\n\n\t/**\n\t * Fetches a collection list from the resource\n\t * \n\t * @param  {String|Array}  path The resource path of the host\n\t * @return {Promise}            The response from the host\n\t */\n\tresource.prototype.fetch = function(path){\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\n\t\t\tpath = setParams(path[0], path[1])\n\t\t}\n\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\n\n\t\treturn $restful.get(http, this.$headers);\n\t};\n\n\t/**\n\t * Sends data to a resource uri with POST method\n\t * \n\t * @param  {String|Array} path The path of the host\n\t * @param  {Object}       data The data to send to the resource\n\t * @return {Promise}           The response from the host\n\t */\n\tresource.prototype.save = function(path, data){\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\n\t\t\tpath = setParams(path[0], path[1])\n\t\t}\n\t\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\n\t\t\n\t\treturn $restful.post(http, data, this.$headers);\n\t};\n\n\t/**\n\t * Sends data to a resource uri with PUT method\n\t * \n\t * @param  {String|Array} path The path of the host\n\t * @param  {Object}       data The data to send to the resource\n\t * @return {Promise}           The response from the host\n\t */\n\tresource.prototype.update = function(path, data) {\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\n\t\t\tpath = setParams(path[0], path[1])\n\t\t}\n\t\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\n\n\t\treturn $restful.put(http, data, this.$headers);\n\t};\n\n\t/**\n\t * Sends a request with data to a resource uri with DELETE method\n\t * \n\t * @param  {String|Array} path The path of the host\n\t * @param  {Object}       data The data to send to the resource\n\t * @return {Promise}           The response from the host\n\t */\n\tresource.prototype.delete = function(path, data) {\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\n\t\t\tpath = setParams(path[0], path[1])\n\t\t}\n\t\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\n\n\t\treturn $restful.delete(http, data, this.$headers);\n\t};\n\n\t/**\n\t * Sets uri parameters into the uri string\n\t * where key object is the parameter name and\n\t * value is the value to replace\n\t * \n\t * @param {String} uri    The uri with parameters to replace\n\t * @param {Object} params The map of parameters to set into uri\n\t */\n\tfunction setParams(uri, params){\n\t\tfor(p in params){\n\t\t\turi = uri.replace(\":\" + p, params[p]);\n\t\t}\n\n\t\treturn uri;\n\t}\n\n\treturn resource;\n}]);","ngRestful.service(\"$restful\", [\"$http\", function($http){\n\t/**\n\t * Performs a GET request to the host\n\t * \n\t * @param  {String}  url     The url path where to send the request\n\t * @param  {Object}  headers The headers options to set in the request\n\t * @return {Promise}         The response from the host\n\t */\n\tthis.get = function(url, headers){\n\t\treturn $http(this.$createRequest({}, \"GET\", url, headers));\n\t};\n\n\t/**\n\t * Performs a POST request to the host\n\t * \n\t * @param  {String}  url     The url path where to send the request\n\t * @param  {Object}  data    The data to send along the request\n\t * @param  {Object}  headers The headers options to set in the request\n\t * @return {Promise}         The response from the host\n\t */\n\tthis.post = function(url, data, headers){\n\t\treturn $http(this.$createRequest(data, \"POST\", url, headers));\n\t};\n\n\t/**\n\t * Performs a PUT request to the host\n\t * \n\t * @param  {String}  url     The url path where to send the request\n\t * @param  {Object}  data    The data to send along the request\n\t * @param  {Object}  headers The headers options to set in the request\n\t * @return {Promise}         The response from the host\n\t */\n\tthis.put = function(url, data, headers){\n\t\treturn $http(this.$createRequest(data, \"PUT\", url, headers));\n\t};\n\n\t/**\n\t * Performs a DELETE request to the host\n\t * \n\t * @param  {String}  url     The url path where to send the request\n\t * @param  {Object}  data    The data to send along the request\n\t * @param  {Object}  headers The headers options to set in the request\n\t * @return {Promise}         The response from the host\n\t */\n\tthis.delete = function(url, data, headers){\n\t\treturn $http(this.$createRequest(data, \"DELETE\", url, headers));\n\t};\n\n\t/**\n\t * Creates a request object for $http, the returned object can vary if\n\t * the data has a file object, if that's the case then content-type is set\n\t * to undefined in order to let the browser handle it\n\t * \n\t * @param  {Object} data    The data that will be sent to the host\n\t * @param  {String} method  The method on which will be used for the request\n\t * @param  {String} url     The url where to send the request\n\t * @param  {Object} headers The object mapped with request headers\n\t * @return {Object}         The object for $http\n\t */\n\tthis.$createRequest = function(data, method, url, headers){\n\t\tvar request = {};\n\n\t\t// Create custom object for attached files\n\t\tif(method != \"GET\" && this.hasFileObject(data)){\n\t\t\tvar form = new FormData();\n\n\t\t\tfor(prop in data){\n\t\t\t\tform.append(prop, data[prop]);\n\t\t\t}\n\n\t\t\t// let the broswer handle the content-type request\n\t\t\theaders[\"Content-Type\"] = undefined;\n\n\t\t\trequest = {\n\t\t\t\tmethod: method,\n\t\t\t\turl: url,\n\t\t\t\tdata: form,\n\t\t\t\ttransformRequest: angular.identity,\n\t\t\t\theaders: headers\n\t\t\t};\n\t\t}\n\n\t\t// Create a normal http object\n\t\telse{\n\t\t\trequest = {\n\t\t\t\tmethod: method,\n\t\t\t\turl: url,\n\t\t\t\tdata: data,\n\t\t\t\theaders: headers\n\t\t\t};\n\t\t}\n\n\t\treturn request;\n\t}\n\n\t/**\n\t * Checks if the object data has a file object\n\t * \n\t * @param  {Object}  data The data where to find\n\t * @return {Boolean}      Whether the file was found\n\t */\n\tthis.hasFileObject = function(data){\n\t\tfor(prop in data){\n\t\t\tif(Object.prototype.toString.call(data[prop]) == \"[object File]\"){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}]);"]}
>>>>>>> c3878739227fae9d6ecccfb3df35c60795f84c7d
