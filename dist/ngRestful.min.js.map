{"version":3,"sources":["module.js","services/resource.js","services/restful.js"],"names":["ngRestful","angular","module","config","$http","defaults","useXDomain","constant","$domain","setDomain","value","this","factory","$restful","$globals","resource","url","opts","isAbsolute","$url","join","$headers","headers","regex","match","setParams","uri","params","p","replace","prototype","fetch","path","Object","toString","call","http","get","save","data","post","update","put","delete","method"],"mappings":"CAAA,WACA,GAAAA,GAAAC,QAAAC,OAAA,eAEAF,GAAAG,QAAA,gBAAA,SAAAC,GAEAA,EAAAC,SAAAC,YAAA,KAMAN,EAAAO,SAAA,aACAC,QAAA,GACAC,UAAA,SAAAC,GACAC,KAAAH,QAAAE,KCbAV,EAAAY,QAAA,aAAA,WAAA,YAAA,SAAAC,EAAAC,GAQA,QAAAC,GAAAC,EAAAC,GACAH,EAAAN,UAAAU,EAAAF,GACAL,KAAAQ,MAAAL,EAAAN,QAAAQ,GAAAI,KAAA,KAEAT,KAAAQ,KAAAH,EAGAL,KAAAU,SAAAJ,EAAAA,EAAAK,eASA,QAAAJ,GAAAF,GACA,GAAAO,GAAA,iBAEA,OAAA,QAAAP,EAAAQ,MAAAD,GA8EA,QAAAE,GAAAC,EAAAC,GACA,IAAAC,IAAAD,GACAD,EAAAA,EAAAG,QAAA,IAAAD,EAAAD,EAAAC,GAGA,OAAAF,GAGA,MA7EAX,GAAAe,UAAAC,MAAA,SAAAC,GACAA,GAAA,kBAAAC,OAAAH,UAAAI,SAAAC,KAAAH,KACAA,EAAAP,EAAAO,EAAA,GAAAA,EAAA,IAGA,IAAAI,GAAAJ,GAAArB,KAAAQ,KAAAa,GAAAZ,KAAA,KAAAT,KAAAQ,IAEA,OAAAN,GAAAwB,IAAAD,EAAAzB,KAAAU,WAUAN,EAAAe,UAAAQ,KAAA,SAAAN,EAAAO,GACAP,GAAA,kBAAAC,OAAAH,UAAAI,SAAAC,KAAAH,KACAA,EAAAP,EAAAO,EAAA,GAAAA,EAAA,IAGA,IAAAI,GAAAJ,GAAArB,KAAAQ,KAAAa,GAAAZ,KAAA,KAAAT,KAAAQ,IAEA,OAAAN,GAAA2B,KAAAJ,EAAAG,EAAA5B,KAAAU,WAUAN,EAAAe,UAAAW,OAAA,SAAAT,EAAAO,GACAP,GAAA,kBAAAC,OAAAH,UAAAI,SAAAC,KAAAH,KACAA,EAAAP,EAAAO,EAAA,GAAAA,EAAA,IAGA,IAAAI,GAAAJ,GAAArB,KAAAQ,KAAAa,GAAAZ,KAAA,KAAAT,KAAAQ,IAEA,OAAAN,GAAA6B,IAAAN,EAAAG,EAAA5B,KAAAU,WAUAN,EAAAe,UAAAa,OAAA,SAAAX,EAAAO,GACAP,GAAA,kBAAAC,OAAAH,UAAAI,SAAAC,KAAAH,KACAA,EAAAP,EAAAO,EAAA,GAAAA,EAAA,IAGA,IAAAI,GAAAJ,GAAArB,KAAAQ,KAAAa,GAAAZ,KAAA,KAAAT,KAAAQ,IAEA,OAAAN,GAAA8B,OAAAP,EAAAG,EAAA5B,KAAAU,WAmBAN,+CC3GAJ,KAAA0B,IAAA,SAAArB,EAAAM,GACA,MAAAlB,IACAwC,OAAA,MACA5B,IAAAA,EACAM,QAAAA,SAYAX,KAAA6B,KAAA,SAAAxB,EAAAuB,EAAAjB,GACA,MAAAlB,IACAwC,OAAA,OACA5B,IAAAA,EACAuB,KAAAA,EACAjB,QAAAA,SAYAX,KAAA+B,IAAA,SAAA1B,EAAAuB,EAAAjB,GACA,MAAAlB,IACAwC,OAAA,MACA5B,IAAAA,EACAuB,KAAAA,EACAjB,QAAAA,SAYAX,KAAAgC,OAAA,SAAA3B,EAAAuB,EAAAjB,GACA,MAAAlB,IACAwC,OAAA,SACA5B,IAAAA,EACAuB,KAAAA,EACAjB,QAAAA","file":"ngRestful.min.js","sourcesContent":["var ngRestful = angular.module(\"ngRestful\", []);\r\n\r\nngRestful.config([\"$httpProvider\", function($http){\r\n\t// Enable CORS response\r\n\t$http.defaults.useXDomain = true;\r\n}]);\r\n\r\n/*\r\n * Define constant configuration for the module\r\n */\r\nngRestful.constant(\"ngRestful\", {\r\n\t$domain: \"\",\r\n\tsetDomain: function(value){\r\n\t\tthis.$domain = value;\r\n\t}\r\n});","ngRestful.factory(\"$resource\", [\"$restful\", \"ngRestful\", function($restful, $globals){\r\n\t/**\r\n\t * Construct function of resource object\r\n\t * Defines the common settings for the resource\r\n\t * \r\n\t * @param  {String} url  The URL of the host API\r\n\t * @param  {Object} opts The options settings to set in the resource\r\n\t */\r\n\tfunction resource(url, opts){\r\n\t\tif($globals.$domain && !isAbsolute(url)){\r\n\t\t\tthis.$url = [$globals.$domain, url].join(\"/\")\r\n\t\t}\r\n\r\n\t\telse{\r\n\t\t\tthis.$url = url;\r\n\t\t}\r\n\r\n\t\tthis.$headers = opts ? (opts.headers || {}) : {};\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if a provided url is absolute\r\n\t * \r\n\t * @param  {String}  url The provided url to evaluate\r\n\t * @return {Boolean}     Whether the url is absolute\r\n\t */\r\n\tfunction isAbsolute(url){\r\n\t\tvar regex = /(https|http).+/g;\r\n\r\n\t\treturn url.match(regex) !== null;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches a collection list from the resource\r\n\t * \r\n\t * @param  {String|Array}  path The resource path of the host\r\n\t * @return {Promise}            The response from the host\r\n\t */\r\n\tresource.prototype.fetch = function(path){\r\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\r\n\t\t\tpath = setParams(path[0], path[1])\r\n\t\t}\r\n\r\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\r\n\r\n\t\treturn $restful.get(http, this.$headers);\r\n\t};\r\n\r\n\t/**\r\n\t * Sends data to a resource uri with POST method\r\n\t * \r\n\t * @param  {String|Array} path The path of the host\r\n\t * @param  {Object}       data The data to send to the resource\r\n\t * @return {Promise}           The response from the host\r\n\t */\r\n\tresource.prototype.save = function(path, data){\r\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\r\n\t\t\tpath = setParams(path[0], path[1])\r\n\t\t}\r\n\t\r\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\r\n\t\t\r\n\t\treturn $restful.post(http, data, this.$headers);\r\n\t};\r\n\r\n\t/**\r\n\t * Sends data to a resource uri with PUT method\r\n\t * \r\n\t * @param  {String|Array} path The path of the host\r\n\t * @param  {Object}       data The data to send to the resource\r\n\t * @return {Promise}           The response from the host\r\n\t */\r\n\tresource.prototype.update = function(path, data) {\r\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\r\n\t\t\tpath = setParams(path[0], path[1])\r\n\t\t}\r\n\t\r\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\r\n\r\n\t\treturn $restful.put(http, data, this.$headers);\r\n\t};\r\n\r\n\t/**\r\n\t * Sends a request with data to a resource uri with DELETE method\r\n\t * \r\n\t * @param  {String|Array} path The path of the host\r\n\t * @param  {Object}       data The data to send to the resource\r\n\t * @return {Promise}           The response from the host\r\n\t */\r\n\tresource.prototype.delete = function(path, data) {\r\n\t\tif(path && Object.prototype.toString.call(path) == \"[object Array]\"){\r\n\t\t\tpath = setParams(path[0], path[1])\r\n\t\t}\r\n\t\r\n\t\tvar http = path ? [this.$url, path].join(\"/\") : this.$url;\r\n\r\n\t\treturn $restful.delete(http, data, this.$headers);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets uri parameters into the uri string\r\n\t * where key object is the parameter name and\r\n\t * value is the value to replace\r\n\t * \r\n\t * @param {String} uri    The uri with parameters to replace\r\n\t * @param {Object} params The map of parameters to set into uri\r\n\t */\r\n\tfunction setParams(uri, params){\r\n\t\tfor(p in params){\r\n\t\t\turi = uri.replace(\":\" + p, params[p]);\r\n\t\t}\r\n\r\n\t\treturn uri;\r\n\t}\r\n\r\n\treturn resource;\r\n}]);","ngRestful.service(\"$restful\", [\"$http\", function($http){\r\n\t/**\r\n\t * Performs a GET request to the host\r\n\t * \r\n\t * @param  {String}  url     The url path where to send the request\r\n\t * @param  {Object}  headers The headers options to set in the request\r\n\t * @return {Promise}         The response from the host\r\n\t */\r\n\tthis.get = function(url, headers){\r\n\t\treturn $http({\r\n\t\t\tmethod: \"GET\",\r\n\t\t\turl: url,\r\n\t\t\theaders: headers || {}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Performs a POST request to the host\r\n\t * \r\n\t * @param  {String}  url     The url path where to send the request\r\n\t * @param  {Object}  data    The data to send along the request\r\n\t * @param  {Object}  headers The headers options to set in the request\r\n\t * @return {Promise}         The response from the host\r\n\t */\r\n\tthis.post = function(url, data, headers){\r\n\t\treturn $http({\r\n\t\t\tmethod: \"POST\",\r\n\t\t\turl: url,\r\n\t\t\tdata: data,\r\n\t\t\theaders: headers || {}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Performs a PUT request to the host\r\n\t * \r\n\t * @param  {String}  url     The url path where to send the request\r\n\t * @param  {Object}  data    The data to send along the request\r\n\t * @param  {Object}  headers The headers options to set in the request\r\n\t * @return {Promise}         The response from the host\r\n\t */\r\n\tthis.put = function(url, data, headers){\r\n\t\treturn $http({\r\n\t\t\tmethod: \"PUT\",\r\n\t\t\turl: url,\r\n\t\t\tdata: data,\r\n\t\t\theaders: headers || {}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Performs a DELETE request to the host\r\n\t * \r\n\t * @param  {String}  url     The url path where to send the request\r\n\t * @param  {Object}  data    The data to send along the request\r\n\t * @param  {Object}  headers The headers options to set in the request\r\n\t * @return {Promise}         The response from the host\r\n\t */\r\n\tthis.delete = function(url, data, headers){\r\n\t\treturn $http({\r\n\t\t\tmethod: \"DELETE\",\r\n\t\t\turl: url,\r\n\t\t\tdata: data,\r\n\t\t\theaders: headers || {}\r\n\t\t});\r\n\t};\r\n}]);"],"sourceRoot":"/source/"}